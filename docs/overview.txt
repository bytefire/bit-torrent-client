OVERVIEW OF BIT-TORRENT CLIENT
==============================

Starting point in code is mtc.c. This is what mtc does when you run it.

1. Download announce file using announce URL in the torrent file.
2. Using the information in torrent and announce files, it creates a metadata
file.
3. It creates a resume file if it isn't already there. It also creates a saved
file if it isn't already there.
4. It calls pwp_start() method which makes use of the metadata, resume and saved
files to download pieces belonging to the file to be downloaded. In pwp_start(),
exactly one thread talks to one peer and there are a maximum of four peer threads
running at any time. The maximum number of peer threads is configurable in code.

1. Torrent File ---(HTTP Request)--> Tracker ---(HTTP Response)--> Announce File

2. Announce File ---(peers_create_metadata)--> Metadata File

3. pwp.h uses that metadata file, along with others, to download the torrent.
Metadata file is in our own format and not a standard format.

Files
-----

mtc creates three files as part of its exection. They have extensions .metadata,
.resume and .saved.

metadata file: This contains essential data derived from .torrent and announce
files that mtc uses to download the file.

resume file: This contains just a bitfield which represents which pieces have been
successfully downloaded. The most significant bit represents the first piece. The
last byte in the bitfield may contain extra bits if the number of pieces isn't an
exact multiple of 8. Those extra bits will always be zero.

saved file: This is the file that will contain pieces of the file being downloaded.

Format of Metadata File:
------------------------

Whole file is one bencoded dictionary with following keys.

1. info_hash: 20 byte info hash
2. our_peer_id: 20 byte our peer id
3. total_length (integer): total length of the file to be downloaded
4. num_of_pieces (integer): total number of pieces
5. piece_length (integer): length of each piece in bytes
6. piece_hashes (byte string): all the sha1 hashes from torrent file.
this is the info hash part of torrent file.
7. peers (list of dictionaries): each element is a dictionary with following keys.
        a. ip
        b. port

Multi-threading:
----------------

A separate thread is created in pwp_start() to talk to each peer. MAX_THREADS in pwp.h
determines maximum number of threads running at a point in time. That is also the maximum
number of peers that the application would be talking to simultaneously. Best effort is
made to ensure that no two threads download the same piece. Thus each thread should be
writing to a different part of the savedfile.

Flow of Control from pwp_start():
---------------------------------

1. pwp_start()
2. (in a separate thread and upto MAX_THREADS such threads) talk_to_peer(): does handshake etc.
if peer doesn't unchoke us, this terminates. otherwise calls get_pieces().
3. get_pieces(): chooses a random piece index and keeps calling download_piece() in a loop until:
	a. there is no piece to download (i.e. whole file downloaded) or
	b. number of downloaded pieces exceded PIECES_TO_DOWNLOAD.
4. download_pieces(): takes idx, index of the piece to download. this calls download_block() in a
loop until the whole piece has been downloaded. then it computes SHA1 of the downloaded piece and
validates it against the SHA1 in metadata file (which was originally taken from torrent file).
